{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Posts/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","Redux/profile-selectors.js","components/Profile/MyPosts/MyPostsConteiner.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileConteiner.jsx"],"names":["module","exports","Post","props","className","classes","item","src","message","likeCounts","maxLength15","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","postsElements","this","posts","map","post","likesCount","postsBlock","data","addPost","newPostText","React","PureComponent","getProfile","state","profilePage","profile","getUserStatus","status","getAutorizedUserId","authPage","userId","getPosts","mapDispatchYoProps","MyPostsConteiner","connect","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","event","currentTarget","value","ProfileInfo","descriptionBlock","avatar","photos","large","userPhoto","alt","isOwner","target","files","length","savePhoto","type","aboutMe","contacts","vk","Preloader","Profile","ProfileConteiner","match","params","autorizedUserId","getUser","getStatus","checkProfile","prevProps","prevState","Component","mapDispatchToProps","compose","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.405f0f69.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__ivQRg\",\"post\":\"MyPosts_post__8cdKg\",\"posts\":\"MyPosts_posts__1H28b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1AK-G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"intro\":\"ProfileInfo_intro__HbDEi\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__187ZB\",\"avatar\":\"ProfileInfo_avatar__2Mzta\"};","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return <div className={classes.item}>\r\n      <img src=\"https://static.independent.co.uk/s3fs-public/thumbnails/image/2020/06/18/10/avatar.jpg\" />\r\n              {props.message}\r\n              <div>\r\n                <span>{props.likeCounts} likes</span>\r\n              </div>\r\n    </div>   \r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../Utils/Validators/validators';\r\nimport { Textarea } from '../../Common/FormsControl/FormsControl';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Posts/Post';\r\n\r\nconst maxLength15 =  maxLengthCreator(15)\r\nconst AddPostForm = (props) => {\r\n  return (\r\n    <form onSubmit = {props.handleSubmit}>\r\n      <div>\r\n        <Field component = {Textarea} \r\n               name = {\"newPostText\"} \r\n               placeholder = {\"Enter new post text\"} \r\n               validate = {[required, maxLength15]}/>\r\n      </div>\r\n      <div>\r\n        <button>Add posts</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\nconst AddPostFormRedux = reduxForm({form : 'addPost'})(AddPostForm)\r\n\r\n\r\nclass MyPosts extends React.PureComponent {\r\n      \r\n  /* shouldComponentUpdate(nextProps, nextState) {\r\n    return nextProps != this.props || nextState != this.state\r\n  } */\r\n\r\n  render() {\r\n  let postsElements = this.props.posts.map(post => <Post message={post.message} likeCounts={post.likesCount} />)\r\n  \r\n  let addPost = (data) => {\r\n    this.props.addPost(data.newPostText);\r\n  }        \r\n    return (\r\n      <div className={classes.postsBlock}>\r\n        <h3>My posts</h3>\r\n        <AddPostFormRedux onSubmit={addPost} />\r\n        <div className={classes.posts}>\r\n          {postsElements}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyPosts;","\r\nexport const getProfile = (state) => {\r\n    return state.profilePage.profile\r\n}\r\n\r\nexport const getUserStatus = (state) => {\r\n    return state.profilePage.status\r\n}\r\n\r\nexport const getAutorizedUserId = (state) => {\r\n    return state.authPage.userId\r\n}\r\n\r\nexport const getPosts = (state) => {\r\n    return state.profilePage.posts\r\n}","import React from 'react';\r\nimport { addPost } from '../../../Redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\nimport { getPosts } from '../../../Redux/profile-selectors';\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts : getPosts(state)\r\n  }\r\n}\r\n\r\nconst mapDispatchYoProps =  {\r\n  addPost\r\n}\r\nconst MyPostsConteiner = connect(mapStateToProps, mapDispatchYoProps)(MyPosts);\r\n\r\nexport default MyPostsConteiner;","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    \r\n    let [editMode, setEditMode] = useState(false),\r\n        [status, setStatus] = useState(props.status)\r\n    \r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={()=>{setEditMode(true)}}>{status || \"--\"}</span>\r\n                </div>}\r\n            {editMode &&\r\n                <div>\r\n                    <input autoFocus={true}\r\n                           onBlur = {()=>{\r\n                               setEditMode(false)\r\n                               props.updateStatus(status)}}\r\n                           onChange = {(event)=>{setStatus(event.currentTarget.value)}}\r\n                           value = {status}/>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport Preloader from '../../Common/Preloader/Preloader';\r\nimport classes from './ProfileInfo.module.css';\r\n\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png'\r\n\r\nconst ProfileInfo = (props) => {\r\n    let onMainPhotoSelected = (event) => {\r\n      if (event.target.files.length) {\r\n        props.savePhoto(event.target.files[0])\r\n      }\r\n    }\r\n    if(!props.profile) {\r\n      return <Preloader />\r\n    } \r\n    return (\r\n        <div>\r\n          <div className={classes.descriptionBlock}>\r\n            <img className = {classes.avatar} src = {props.profile.photos.large || userPhoto} alt = \"\"/>\r\n            <div>\r\n              {props.isOwner && <input onChange = {onMainPhotoSelected} type = {\"file\"} />}\r\n            </div>\r\n            <div>\r\n              <ProfileStatusWithHooks status = {props.status} \r\n                                      updateStatus = {props.updateStatus} />\r\n            </div>\r\n            <div>About: {props.profile.aboutMe}</div>\r\n            <div>Contact: {props.profile.contacts.vk}</div>\r\n          </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\n\r\n\r\nimport MyPostsConteiner from './MyPosts/MyPostsConteiner';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = (props) => {\r\n   \r\n  return ( \r\n    <div>\r\n      <ProfileInfo  profile = {props.profile}\r\n                    status = {props.status}\r\n                    updateStatus = {props.updateStatus} \r\n                    isOwner = {props.isOwner}\r\n                    savePhoto = {props.savePhoto}/>\r\n      <MyPostsConteiner />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {getUser, getStatus, updateStatus, savePhoto} from '../../Redux/profile-reducer'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../Hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { getAutorizedUserId, getProfile, getUserStatus } from '../../Redux/profile-selectors';\r\n\r\nclass ProfileConteiner extends React.Component {\r\n  \r\n  checkProfile() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.autorizedUserId\r\n    }\r\n    this.props.getUser(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.checkProfile()\r\n  }\r\n  componentDidUpdate (prevProps, prevState) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId){\r\n      this.checkProfile()\r\n    }\r\n  }\r\n\r\n    render() {   \r\n      return (<Profile {...this.props} \r\n        profile = {this.props.profile} \r\n        status = {this.props.status}\r\n        isOwner = {!this.props.match.params.userId}\r\n        updateStatus = {this.props.updateStatus}\r\n        savePhoto = {this.props.savePhoto} />)\r\n   }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: getProfile(state),\r\n  status : getUserStatus(state),\r\n  autorizedUserId : getAutorizedUserId(state)\r\n})\r\n\r\nlet mapDispatchToProps = {getUser, getStatus, updateStatus, savePhoto}\r\n\r\n\r\n\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withRouter, withAuthRedirect)(ProfileConteiner);"],"sourceRoot":""}